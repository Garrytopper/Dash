<?php

namespace Dash\TachesBundle\Repository;
use Doctrine\ORM\QueryBuilder;

/**
 * TaskRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskRepository extends \Doctrine\ORM\EntityRepository
{
    public function lienClient(QUERYBUILDER $qb)
    {
        $qb->leftJoin('t.client', 'c')
            ->addSelect('c')
            ;
    }

    public function standard()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.etat = :etat')
            ->setParameter('etat', 'Standard')
            ;
        return $qb->getQuery()->getResult();
    }

    public function prioritaire()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.etat = :etat')
            ->setParameter('etat', 'prioritaire')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Dessin()
    {
        $qb = $this->createQueryBuilder('t');
        $qb ->Where('t.tache = :tache')
            ->setParameter('tache', 'Dessin')
            ;
        $this->lienClient($qb);
        $qb->orderBy('c.dateRdv', 'asc')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Ptech()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Plan tech')
            ;
        $this->lienClient($qb);
        return $qb->getQuery()->getResult();
    }

    public function Dmetre()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Dossier metre')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Dpose()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Dossier pose')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Rcheque()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Relance Cheque')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Faccompte()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Facture')
            ;
        return $qb->getQuery()->getResult();
    }

    public function App()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Application')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Autre()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Autre')
            ;
        return $qb->getQuery()->getResult();
    }

    public function Command()
    {
        $qb = $this->createQueryBuilder('t');
        $qb->Where('t.tache = :tache')
            ->setParameter('tache', 'Commander')
            ;
        return $qb->getQuery()->getResult();
    }

}
